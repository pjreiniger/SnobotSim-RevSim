
#pragma once

#include <string>

#include "RevSimUtils/BaseRevWrapper.h"
#include "RevSimUtils/RevMockUtilities.h"
#include "rev/{{ cci_class_name }}.h"
#include "simulation/SimDeviceSim.h"

namespace SnobotSim
{

class {{ wrapper_class_name }} : public BaseRevWrapper
{
public:
    using BaseRevWrapper::Send;

    {% if has_device_id %}explicit {% endif %}{{ wrapper_class_name }}({% if has_device_id %}int aDeviceId{% endif %});
{% if has_device_id %}    const int mDeviceId;{% endif %}

    void Receive(const std::string& aName, uint8_t* aBuffer, int aSize);
    void Send(const std::string& aName, uint8_t* aBuffer, int aSize);

    //////////////////////////////////////////
{{header_functions}}

protected:
    hal::SimDevice m_simDevice;

{% for variable_tuple in normal_sim_device_variables %}
    hal::{{ variable_tuple[1] }} m_{{variable_tuple[0] }};{% endfor %}


{% if slotted_sim_device_variables %}
struct SlottedVariables
{
{% for variable_tuple in slotted_sim_device_variables %}
    hal::{{ variable_tuple[1] }} m_{{variable_tuple[0] }};{% endfor %}
};

SlottedVariables m_slotted_variables[{{ num_slots }}];

{% endif %}

};

} // namespace SnobotSim

